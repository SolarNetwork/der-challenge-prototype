// Copyright 2019 SolarNetwork Foundation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package solarnetwork.esi.service;

option cc_enable_arenas = true;
option java_multiple_files = true;
option java_outer_classname = "DerFacilityServiceProto";
option java_package = "net.solarnetwork.esi.service";
option objc_class_prefix = "ESI";

import "google/protobuf/empty.proto";
import "solarnetwork/esi/domain/datum_request.proto";
import "solarnetwork/esi/domain/der_facility_registration.proto";
import "solarnetwork/esi/domain/der_program.proto";
import "solarnetwork/esi/domain/der_resource_characteristics.proto";
import "solarnetwork/esi/domain/der_route.proto";
import "solarnetwork/esi/domain/power_parameters.proto";
import "solarnetwork/esi/domain/power_profile_datum.proto";
import "solarnetwork/esi/domain/price_datum.proto";
import "solarnetwork/esi/domain/price_map.proto";
import "solarnetwork/esi/domain/price_map_offer.proto";
import "solarnetwork/esi/domain/price_map_offer_feedback.proto";
import "solarnetwork/esi/domain/price_map_offer_response.proto";
import "solarnetwork/esi/domain/price_map_offer_status.proto";
import "solarnetwork/esi/domain/price_map_offer_status_request.proto";
import "solarnetwork/esi/domain/price_parameters.proto";

// The energy services interface (ESI) facility service API, where a facility is
// something that manages distributed energy resources (DER).
// ---
// Note: In external documentation created by EcogyEnergy, a DerFacility or
// "DER Facility" is often refered to as a DERF for short (for those familar
// with this external documentation, from here on, please remember that
// DerFacility or Facility = DERF).

service DerFacilityService {

  // ===========================================================================
  // DerFacility registration (Note: this is a callback from DerOperator/IPER)
  // ===========================================================================

  // Complete the facility registration process, either successfully or as an
  // error. This method is called at some point after a call was made to
  // `DerOperatorService.SubmitDerFacilityRegistrationForm()`.
  rpc CompleteDerFacilityRegistration(
  	solarnetwork.esi.domain.DerFacilityRegistration)
  returns (google.protobuf.Empty);

  // ===========================================================================
  // 
  // ===========================================================================

  // Query to get the DER characteristics of this service.
  rpc GetDerResourceCharacteristics(solarnetwork.esi.domain.DerRoute) 
  returns (solarnetwork.esi.domain.DerResourceCharacteristics);

  // Query for list of available price maps.
  rpc ListPriceMaps(solarnetwork.esi.domain.DerRoute)
  returns (stream solarnetwork.esi.domain.PriceMap);
  
  // Propose a price map offer for the service to accept, reject, or propose a
  // counter offer.
  rpc ProposePriceMapOffer(solarnetwork.esi.domain.PriceMapOffer)
  returns (solarnetwork.esi.domain.PriceMapOfferResponse);
  
  // Get the status of a price map offer.
  rpc GetPriceMapOfferStatus(solarnetwork.esi.domain.PriceMapOfferStatusRequest)
  returns (solarnetwork.esi.domain.PriceMapOfferStatus);
  
  // Provide feedback on a price map offer, after the offer event is over.
  rpc ProvidePriceMapOfferFeedback(
  	solarnetwork.esi.domain.PriceMapOfferFeedback)
  returns (solarnetwork.esi.domain.PriceMapOfferFeedback);
  
  // Query for list of power profile datum over a time range.
  rpc ListPowerProfile(solarnetwork.esi.domain.DatumRequest)
  returns (stream solarnetwork.esi.domain.PowerProfileDatum);

  // Get the power parameters currently used by the service.
  rpc GetPowerParameters(google.protobuf.Empty)
  returns (solarnetwork.esi.domain.PowerParameters);
  
  // Set the power parameters, and return the power parameters active after the
  // request, which may or may not have been changed by the request metrics if
  // the service cannot or refuses to change them.
  rpc SetPowerParameters(solarnetwork.esi.domain.PowerParameters)
  returns (solarnetwork.esi.domain.PowerParameters);

  // Get the price metrics currently used by the service.
  rpc GetPriceParameters(solarnetwork.esi.domain.DerRoute)
  returns (solarnetwork.esi.domain.PriceParameters);
  
  // List the supported program types.
  rpc ListSupportedDerPrograms(solarnetwork.esi.domain.DerRoute)
  returns (stream solarnetwork.esi.domain.DerProgram);

  // Provide pricing data to the facility.
  rpc ProvidePrices(stream solarnetwork.esi.domain.PriceDatum)
  returns (google.protobuf.Empty);

}
