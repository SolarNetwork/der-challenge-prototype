// Copyright 2019 SolarNetwork Foundation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package solarnetwork.esi.domain;

option cc_enable_arenas = true;
option java_multiple_files = true;
option java_outer_classname = "DerFacilityRegistrationFormDataProto";
option java_package = "net.solarnetwork.esi.domain";
option objc_class_prefix = "ESI";

import "solarnetwork/esi/domain/form_data.proto";

// A filled-in DerFacilityRegistrationForm.
message DerFacilityRegistrationFormData {

  // The UID of the DerOperator to register with.
  // 
  // This value will have been previously provided via a
  // `DerFacilityRegistrationForm` message.
  string operatorUid = 1;
  
  // A facility-provided unique ID that the operator can refer to the facility by.
  // 
  // This ID must be unique at least within the domain represented by
  // `facilityEndpointUri`. That is, the ID must be unique within the facility.
  // This ID is defined externally to this API. If a facility is directly
  // connected to an operator, the facility might generate its own unique ID,
  // for example as a UUID. If a facility sits behind a proxy or aggregator
  // service, then the proxy or aggregator service might be responsible for
  // generating unique IDs. In that case, this facility must provide some
  // external method of obtaining its ID from that service. For example, an EV
  // charger first boots it might come pre-configured to register itself with a
  // proxy service, or prompt for registration with a proxy service; either way
  // it obtains its facility ID which is then passed to the operator here.
  string facilityUid = 2;
  
  // The gRPC compliant URI the operator can access the facility on.
  // 
  // This endpoint might be a direct connection to the facility submitting the
  // registration form, or it might be a proxy facility that manages the ESI
  // service on behalf of the facility submitting the registration form.
  string facilityEndpointUri = 3;
  
  // A cryptographic set of random bytes to use with registration.
  // 
  // This nonce is used to support a facility proxy service, so that when the
  // `CompleteDerFacilityRegistration` method is called on the proxy, the
  // facility submitting the registration form can verify the operator is the
  // same during both interactions.
  bytes facilityNonce = 4;

  // The completed registration form.
  FormData data = 5;
  
}
