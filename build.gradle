buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

subprojects {
    apply plugin: "checkstyle"
    apply plugin: "java"

    group = "net.solarnetwork.esi"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    [
        compileJava,
        compileTestJava
    ].each() {
        it.options.compilerArgs += [
            "-Xlint:all",
            "-Xlint:-options",
            "-Xlint:-path",
            "-Xlint:-try"
        ]
        it.options.encoding = "UTF-8"
        if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
            it.options.compilerArgs += ["-Werror"]
        }
    }

    compileTestJava {
        options.compilerArgs += [
            "-Xlint:-serial"
        ]
    }

    jar.manifest {
        attributes('Implementation-Title': name,
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-JDK': System.getProperty('java.version'),
        'Source-Compatibility': sourceCompatibility,
        'Target-Compatibility': targetCompatibility)
    }

    javadoc.options {
        encoding = 'UTF-8'
        use = true
        links 'https://docs.oracle.com/javase/8/docs/api/'
        source = "8"
    }

    ext {

		checkstyleVersion = '8.5'
        nettyVersion = '4.1.34.Final'
        googleauthVersion = '0.13.0'
        grpcVersion = '1.21.0'
        guavaVersion = '26.0-android'
        protobufVersion = '3.7.1'
        protocVersion = protobufVersion
        protobufNanoVersion = '3.0.0-alpha-5'
        opencensusVersion = '0.21.0'

        configureProtoCompilation = {
            String generatedSourcePath = "${projectDir}/src/generated"
            project.apply plugin: 'com.google.protobuf'
            project.protobuf {
                protoc {
                    if (project.hasProperty('protoc')) {
                        path = project.protoc
                    } else {
                        artifact = "com.google.protobuf:protoc:${protocVersion}"
                    }
                }
                generateProtoTasks {
                    all().each { task ->
                        // Recompile protos when build.gradle has been changed, because
                        // it's possible the version of protoc has been changed.
                        task.inputs.file "${rootProject.projectDir}/build.gradle"
                    }
                }
            }
            if (rootProject.childProjects.containsKey('grpc-compiler')) {
                // Only when the codegen is built along with the project, will we be able to run
                // the grpc code generator.
                project.protobuf {
                    plugins { grpc { path = javaPluginPath } }
                    generateProtoTasks {
                        all().each { task ->
                            project["syncGeneratedSources${task.sourceSet.name}"].dependsOn task

                            task.dependsOn ':grpc-compiler:java_pluginExecutable'
                            // Recompile protos when the codegen has been changed
                            task.inputs.file javaPluginPath
                            task.plugins { grpc { option 'noversion' } }
                        }
                    }
                }

                task syncGeneratedSources { }
                sourceSets.all { sourceSet ->
                    task "syncGeneratedSources${sourceSet.name}"(type: Sync) {
                        from "$buildDir/generated/source/proto/${sourceSet.name}/grpc"
                        into "$generatedSourcePath/${sourceSet.name}/grpc"
                    }
                    syncGeneratedSources.dependsOn "syncGeneratedSources${sourceSet.name}"
                }
                // Re-sync as part of a normal build, to avoid forgetting to run the sync
                assemble.dependsOn syncGeneratedSources
            } else {
                // Otherwise, we just use the checked-in generated code.
                project.sourceSets {
                    main { java { srcDir "${generatedSourcePath}/main/grpc" } }
                    test { java { srcDir "${generatedSourcePath}/test/grpc" } }
                }
            }

            [
                compileJava,
                compileTestJava
            ].each() {
                // Protobuf-generated code produces some warnings.
                // https://github.com/google/protobuf/issues/2718
                it.options.compilerArgs += [
                    "-Xlint:-cast",
                ]
            }
        }

        libraries = [
            gson: "com.google.code.gson:gson:2.7",
            guava: "com.google.guava:guava:${guavaVersion}",
            javax_annotation: 'javax.annotation:javax.annotation-api:1.2',
            protobuf: "com.google.protobuf:protobuf-java:${protobufVersion}",
            protobuf_plugin: 'com.google.protobuf:protobuf-gradle-plugin:0.8.8',

            // Test dependencies.
            junit: 'junit:junit:4.12',
            mockito: 'org.mockito:mockito-core:2.25.1',
        ]
    }

    dependencies {
        testCompile libraries.junit,
                libraries.mockito
    }

    // Disable JavaDoc doclint on Java 8. It's annoying.
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    // For jdk10 we must explicitly choose between html4 and html5, otherwise we get a warning
    if (JavaVersion.current().isJava10Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addBooleanOption('html4', true)
            }
        }
    }

    checkstyle {
        toolVersion = "8.5"
		configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        ignoreFailures = false
        if (rootProject.hasProperty("checkstyle.ignoreFailures")) {
            ignoreFailures = rootProject.properties["checkstyle.ignoreFailures"].toBoolean()
        }
    }

    checkstyleMain {
        source = fileTree(dir: "src/main", include: "**/*.java")
    }

    checkstyleTest {
        source = fileTree(dir: "src/test", include: "**/*.java")
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // At a test failure, log the stack trace to the console so that we don't
    // have to open the HTML in a browser.
    test {
        testLogging {
            exceptionFormat = 'full'
            showExceptions true
            showCauses true
            showStackTraces true
        }
        maxHeapSize = '1500m'
    }
}
